{
	"info": {
		"_postman_id": "bb2b86f4-1662-40a6-a67d-a6d7f8fce7d7",
		"name": "Organize",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29983963"
	},
	"item": [
		{
			"name": "Get data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verificar campo 'nome' na resposta\", function () {",
							"    var responseData = pm.response.json();",
							"    pm.expect(responseData[0]).to.have.property('nome'); // Verifique a propriedade 'nome' no primeiro objeto da matriz.",
							"});",
							"pm.test(\"Verificar tempo de resposta\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500); // Verifica se o tempo de resposta está abaixo de 500 ms",
							"});",
							"pm.test(\"Verificar conteúdo JSON\", function () {",
							"    pm.response.to.be.json; // Verifica se a resposta é um JSON válido",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/usuario",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"usuario"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Post data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nome\": \"João\",\n    \"cpf\": \"654323456\",\n    \"telefone\": \"9876543\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/usuario",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"usuario"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							"pm.test(\"Verificar código de status 200\", function () {",
							"    pm.response.to.have.status(200); // Verifique se o código de status da resposta é 200 (OK)",
							"});",
							"",
							"pm.test(\"Verificar tempo de resposta\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500); // Verifica se o tempo de resposta está abaixo de 500 ms",
							"});",
							"pm.test(\"Verificar conteúdo JSON\", function () {",
							"    pm.response.to.be.json; // Verifica se a resposta é um JSON válido",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nome\": \"Maria Santos\",\n    \"cpf\": 12345678901,\n    \"telefone\": 1234567890\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/usuario/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"usuario",
						"1"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							"",
							"pm.test(\"Verificar tempo de resposta\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500); // Verifica se o tempo de resposta está abaixo de 500 ms",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"id\": 1,\r\n        \"nome\": \"Maria Lima\",\r\n        \"cpf\": 12345678901,\r\n        \"telefone\": 1234567890\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/usuario/2",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"usuario",
						"2"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}